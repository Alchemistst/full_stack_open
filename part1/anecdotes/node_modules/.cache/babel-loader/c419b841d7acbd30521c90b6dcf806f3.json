{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Javi\\\\Documents\\\\GitHub\\\\full_stack_open\\\\part1\\\\anecdotes\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Javi\\\\Documents\\\\GitHub\\\\full_stack_open\\\\part1\\\\anecdotes\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({\n  handleclick,\n  name\n}) => {\n  return React.createElement(\"button\", {\n    onClick: handleclick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, name);\n};\n\nconst App = props => {\n  //State variables\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        selected = _useState2[0],\n        setSelected = _useState2[1];\n\n  const _useState3 = useState(anecdotes.map(() => 0)),\n        _useState4 = _slicedToArray(_useState3, 2),\n        scores = _useState4[0],\n        setScores = _useState4[1]; //Each position matches and holds the score for each one of the anecdotes. \n  //Other variables\n\n\n  let mostUpvotedSelected = scores.indexOf(Math.max(...scores)); //Index of the most upvoted anecdote, considering that scores and anecdotes are mapped\n  //Helper functions\n\n  const nextAnecdote = () => {\n    //Function to handle \"Next anecdote\" button click. State is changed to a random number regardless of the length of the array of anecdotes.\n    let randomPick = Math.round(Math.random() * (anecdotes.length - 1)); //Clause to ensure there's no repetition\n\n    if (selected === randomPick) {\n      nextAnecdote();\n      console.log(\"I got repeated hahaha\");\n    } else {\n      setSelected(randomPick);\n    }\n  };\n\n  const upvote = () => {\n    //Function for handling \"Upvote\" button. Increments score and updates score array.\n    let scoresCopy = [...scores];\n    scoresCopy[selected]++;\n    setScores(scoresCopy);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Anecdote of the day\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, props.anecdotes[selected]), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, scores[selected], \" upvotes\"), React.createElement(Button, {\n    name: \"Upvote\",\n    handleclick: upvote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(Button, {\n    name: \"Next anecdote!\",\n    handleclick: nextAnecdote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Most popular anecdote\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, props.anecdotes[mostUpvotedSelected]), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, scores[mostUpvotedSelected], \" upvotes\"));\n};\n\nconst anecdotes = ['If it hurts, do it more often', 'Adding manpower to a late software project makes it later!', 'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.', 'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.', 'Premature optimization is the root of all evil.', 'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'];\nReactDOM.render(React.createElement(App, {\n  anecdotes: anecdotes,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Javi/Documents/GitHub/full_stack_open/part1/anecdotes/src/index.js"],"names":["React","useState","ReactDOM","Button","handleclick","name","App","props","selected","setSelected","anecdotes","map","scores","setScores","mostUpvotedSelected","indexOf","Math","max","nextAnecdote","randomPick","round","random","length","console","log","upvote","scoresCopy","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,WAAD;AAAcC,EAAAA;AAAd,CAAD,KAAwB;AACnC,SACI;AAAQ,IAAA,OAAO,EAAED,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BC,IAA/B,CADJ;AAGH,CAJD;;AAMA,MAAMC,GAAG,GAAIC,KAAD,IAAU;AAClB;AADkB,oBAEcN,QAAQ,CAAC,CAAD,CAFtB;AAAA;AAAA,QAEXO,QAFW;AAAA,QAEDC,WAFC;;AAAA,qBAGUR,QAAQ,CAACS,SAAS,CAACC,GAAV,CAAc,MAAI,CAAlB,CAAD,CAHlB;AAAA;AAAA,QAGXC,MAHW;AAAA,QAGHC,SAHG,kBAGyC;AAE3D;;;AACA,MAAIC,mBAAmB,GAAGF,MAAM,CAACG,OAAP,CAAeC,IAAI,CAACC,GAAL,CAAS,GAAGL,MAAZ,CAAf,CAA1B,CANkB,CAM4C;AAE9D;;AACA,QAAMM,YAAY,GAAG,MAAI;AACrB;AACA,QAAIC,UAAU,GAAGH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,MAAL,MAAeX,SAAS,CAACY,MAAV,GAAiB,CAAhC,CAAX,CAAjB,CAFqB,CAIrB;;AACA,QAAId,QAAQ,KAAKW,UAAjB,EAA6B;AACzBD,MAAAA,YAAY;AACZK,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH,KAHD,MAGK;AACDf,MAAAA,WAAW,CAACU,UAAD,CAAX;AACH;AAEJ,GAZD;;AAcA,QAAMM,MAAM,GAAG,MAAK;AAChB;AACA,QAAIC,UAAU,GAAG,CAAC,GAAGd,MAAJ,CAAjB;AACAc,IAAAA,UAAU,CAAClB,QAAD,CAAV;AACAK,IAAAA,SAAS,CAACa,UAAD,CAAT;AACH,GALD;;AAOA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKnB,KAAK,CAACG,SAAN,CAAgBF,QAAhB,CADL,CAFJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKI,MAAM,CAACJ,QAAD,CADX,aALJ,EAQI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,WAAW,EAAEiB,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,EASI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,gBAAb;AAA8B,IAAA,WAAW,EAAEP,YAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAVJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKX,KAAK,CAACG,SAAN,CAAgBI,mBAAhB,CADL,CAXJ,EAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,MAAM,CAACE,mBAAD,CADX,aAdJ,CADJ;AAqBH,CAnDD;;AAqDA,MAAMJ,SAAS,GAAG,CACd,+BADc,EAEd,4DAFc,EAGd,8LAHc,EAId,iHAJc,EAKd,iDALc,EAMd,oLANc,CAAlB;AAWAR,QAAQ,CAACyB,MAAT,CACI,oBAAC,GAAD;AAAK,EAAA,SAAS,EAAEjB,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEIkB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFJ","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({handleclick, name}) =>{\n    return(\n        <button onClick={handleclick}>{name}</button>\n    )\n}\n\nconst App = (props) =>{\n    //State variables\n    const [selected, setSelected] = useState(0)\n    const [scores, setScores] = useState(anecdotes.map(()=>0)) //Each position matches and holds the score for each one of the anecdotes. \n    \n    //Other variables\n    let mostUpvotedSelected = scores.indexOf(Math.max(...scores)) //Index of the most upvoted anecdote, considering that scores and anecdotes are mapped\n\n    //Helper functions\n    const nextAnecdote = ()=>{\n        //Function to handle \"Next anecdote\" button click. State is changed to a random number regardless of the length of the array of anecdotes.\n        let randomPick = Math.round(Math.random()*(anecdotes.length-1))\n        \n        //Clause to ensure there's no repetition\n        if (selected === randomPick) {\n            nextAnecdote()\n            console.log(\"I got repeated hahaha\")\n        }else{\n            setSelected(randomPick)\n        }\n        \n    } \n    \n    const upvote = () =>{\n        //Function for handling \"Upvote\" button. Increments score and updates score array.\n        let scoresCopy = [...scores]\n        scoresCopy[selected] ++\n        setScores(scoresCopy)\n    }\n    \n    return(\n        <div>\n            <h1>Anecdote of the day</h1>\n            <div>\n                {props.anecdotes[selected]}\n            </div>\n            <div>\n                {scores[selected]} upvotes\n            </div>\n            <Button name=\"Upvote\" handleclick={upvote}/>\n            <Button name=\"Next anecdote!\" handleclick={nextAnecdote}/>\n            <h1>Most popular anecdote</h1>\n            <div>\n                {props.anecdotes[mostUpvotedSelected]}\n            </div>\n            <div>\n                {scores[mostUpvotedSelected]} upvotes\n            </div>\n\n        </div>\n    )\n}\n\nconst anecdotes = [\n    'If it hurts, do it more often',\n    'Adding manpower to a late software project makes it later!',\n    'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\n    'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\n    'Premature optimization is the root of all evil.',\n    'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'\n\n]\n\n\nReactDOM.render(\n    <App anecdotes={anecdotes} />, \n    document.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}