{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Javi\\\\Documents\\\\GitHub\\\\full_stack_open\\\\part1\\\\unicafe\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Javi\\\\Documents\\\\GitHub\\\\full_stack_open\\\\part1\\\\unicafe\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = props => {\n  //Generic button definition. Button displays name and adds score accordingly\n  return React.createElement(\"button\", {\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, props.name);\n};\n\nconst Score = props => {\n  //Generic Score component definition for displaying feedback\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, props.name + ' ' + props.score);\n};\n\nconst Statistics = ({\n  stats\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Statistics\"), React.createElement(Score, {\n    name: \"Good\",\n    score: stats.good,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(Score, {\n    name: \"Neutral\",\n    score: stats.neutral,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(Score, {\n    name: \"Bad\",\n    score: stats.bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(Score, {\n    name: \"All\",\n    score: stats.total,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(Score, {\n    name: \"Average\",\n    score: stats.average,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), React.createElement(Score, {\n    name: \"Positive\",\n    score: stats.percentage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n};\n\nconst App = () => {\n  // Save clicks of each button to own state\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1]; //Computes total\n\n\n  let total = good + neutral + bad;\n  let average = 0;\n  let percentage = 0; //If possible to compute\n\n  if (total !== 0) {\n    //Computes average\n    average = (good - bad) / total; //Computes percentage\n\n    percentage = 100 * good / total + '%';\n  }\n\n  let stats = {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    total: total,\n    average: average,\n    percentage: percentage\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Give feedback\"), React.createElement(Button, {\n    name: \"Good\",\n    onClick: () => setGood(good + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(Button, {\n    name: \"Neutral\",\n    onClick: () => setNeutral(neutral + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(Button, {\n    name: \"Bad\",\n    onClick: () => setBad(bad + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })), React.createElement(Statistics, {\n    stats: stats,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Javi/Documents/GitHub/full_stack_open/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Button","props","onClick","name","Score","score","Statistics","stats","good","neutral","bad","total","average","percentage","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Button = (props) =>{\n    //Generic button definition. Button displays name and adds score accordingly\n    return(\n        <button onClick={props.onClick}>{props.name}</button>\n    )\n}\n\nconst Score = (props) =>{\n    //Generic Score component definition for displaying feedback\n    return(\n        <div>{props.name + ' ' + props.score}</div>\n    )\n}\n\nconst Statistics = ({stats}) =>{\n    return(\n        <div>\n                <h1>Statistics</h1>\n                <Score name=\"Good\" score={stats.good} />\n                <Score name=\"Neutral\" score={stats.neutral} />\n                <Score name=\"Bad\" score={stats.bad} />\n                <Score name=\"All\" score={stats.total} />\n                <Score name=\"Average\" score={stats.average} />\n                <Score name=\"Positive\" score={stats.percentage} />\n            </div>\n    )\n}\n\nconst App = () => {\n    // Save clicks of each button to own state\n    const [good, setGood] = useState(0)\n    const [neutral, setNeutral] = useState(0)\n    const [bad, setBad] = useState(0)\n\n    //Computes total\n    let total = good+neutral+bad\n\n    let average = 0\n\n    let percentage = 0\n\n    //If possible to compute\n    if (total !== 0){\n    //Computes average\n    average = (good-bad)/total\n\n    //Computes percentage\n    percentage = 100 * good/total + '%'\n    }\n\n    let stats ={\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        total: total,\n        average: average,\n        percentage: percentage\n    }\n\n    return(\n        <div>\n            <div>\n                <h1>Give feedback</h1>\n                <Button name=\"Good\" onClick={() => setGood(good + 1)} />\n                <Button name=\"Neutral\" onClick={() => setNeutral(neutral + 1)}/>\n                <Button name=\"Bad\" onClick={() => setBad(bad + 1)}/>\n            </div>\n            <Statistics stats={stats} />\n        </div>\n    )\n}\n\nReactDOM.render(<App />,\n    document.getElementById('root')\n)\n"]},"metadata":{},"sourceType":"module"}