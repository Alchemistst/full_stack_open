{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Javi\\\\Documents\\\\GitHub\\\\full_stack_open\\\\part2\\\\phonebook\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Javi\\\\Documents\\\\GitHub\\\\full_stack_open\\\\part2\\\\phonebook\\\\src\\\\App.js\";\nimport React, { useState } from 'react'; //COMPONENTS\n\nconst Person = ({\n  name,\n  number\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4\n  },\n  __self: this\n}, \" \", name, \" \", number);\n\nconst App = () => {\n  //STATE:\n  const _useState = useState([{\n    name: 'Arto Hellas',\n    number: '040-1234567'\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        persons = _useState2[0],\n        setPersons = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newName = _useState4[0],\n        setNewName = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        newNumber = _useState6[0],\n        setNewNumber = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        newSearch = _useState8[0],\n        setNewSearch = _useState8[1]; //HELPER FUNCTIONS:\n  //handleTyping updates the state of the variable assigned to the field as the user types\n\n\n  const handleTyping = (setNew, e) => {\n    setNew(e.target.value);\n  }; //handleSend updates the state of person so the newName typed is added\n\n\n  const handleSend = event => {\n    event.preventDefault(); //Prevents contacts for being stored empty\n\n    if (newName.length * newNumber.length === 0) return; //Prevents storing contact that already exist\n\n    if (persons.find(person => person.name === newName)) {\n      window.alert(\"\".concat(newName, \" is already added to phonebook\"));\n      return;\n    } //Set new person\n\n\n    const personObject = {\n      name: newName,\n      number: newNumber\n    };\n    setPersons(persons.concat(personObject)); //Restore defaults for fields\n\n    setNewName('');\n    setNewNumber('');\n  }; //renderNumbers renders all numbers if search field is empty. Renders matches if search field is being used.\n\n\n  function renderNumbers() {\n    if (newSearch === '') {\n      return persons.map(person => React.createElement(Person, {\n        key: person.name,\n        name: person.name,\n        number: person.number,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }));\n    } else {\n      const personsFiltered = persons.filter(person => person.name === newSearch);\n      return personsFiltered.map(person => React.createElement(Person, {\n        key: person.name,\n        name: person.name,\n        number: person.number,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }));\n    }\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Phonebook\"), React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Search: \", React.createElement(\"input\", {\n    value: newSearch,\n    onChange: e => handleTyping(setNewSearch, e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }))), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Add new\"), React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"name: \", React.createElement(\"input\", {\n    value: newName,\n    onChange: e => handleTyping(setNewName, e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"number: \", React.createElement(\"input\", {\n    value: newNumber,\n    onChange: e => handleTyping(setNewNumber, e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: handleSend,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"add\"))), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Numbers\"), renderNumbers());\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Javi/Documents/GitHub/full_stack_open/part2/phonebook/src/App.js"],"names":["React","useState","Person","name","number","App","persons","setPersons","newName","setNewName","newNumber","setNewNumber","newSearch","setNewSearch","handleTyping","setNew","e","target","value","handleSend","event","preventDefault","length","find","person","window","alert","personObject","concat","renderNumbers","map","personsFiltered","filter"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\n//COMPONENTS\r\nconst Person = ({name, number}) => <div> {name} {number}</div>\r\n\r\n\r\nconst App = () => {\r\n    //STATE:\r\n    const [ persons, setPersons] = useState([\r\n      { name: 'Arto Hellas',\r\n        number: '040-1234567'\r\n      }\r\n    ]) \r\n    const [ newName, setNewName ] = useState('')\r\n    const [ newNumber, setNewNumber] = useState('')\r\n    const [ newSearch, setNewSearch] = useState('')\r\n    \r\n    //HELPER FUNCTIONS:\r\n\r\n    //handleTyping updates the state of the variable assigned to the field as the user types\r\n    const handleTyping = (setNew,e) => {\r\n      setNew(e.target.value)\r\n    }\r\n\r\n    //handleSend updates the state of person so the newName typed is added\r\n    const handleSend = (event) => {\r\n        event.preventDefault()\r\n\r\n        //Prevents contacts for being stored empty\r\n        if (newName.length * newNumber.length === 0) return\r\n\r\n        //Prevents storing contact that already exist\r\n        if (persons.find(person => person.name === newName)){\r\n            window.alert(`${newName} is already added to phonebook`)\r\n            return\r\n        }\r\n\r\n        //Set new person\r\n        const personObject = {\r\n            name: newName,\r\n            number: newNumber\r\n        }\r\n        setPersons(persons.concat(personObject))\r\n\r\n        //Restore defaults for fields\r\n        setNewName('')\r\n        setNewNumber('')\r\n    }\r\n\r\n    //renderNumbers renders all numbers if search field is empty. Renders matches if search field is being used.\r\n    function renderNumbers() {\r\n      \r\n      if (newSearch === ''){\r\n        return persons.map((person)=><Person key={person.name} name={person.name} number={person.number}/>)\r\n      }else{\r\n        const personsFiltered = persons.filter((person)=> person.name === newSearch )\r\n        return personsFiltered.map((person)=><Person key={person.name} name={person.name} number={person.number}/>)\r\n      }\r\n      \r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h2>Phonebook</h2>\r\n        \r\n        <form>\r\n          <div>\r\n              Search: <input value={newSearch} onChange={(e) => handleTyping(setNewSearch, e)}/>\r\n          </div>\r\n        </form>\r\n        \r\n        <h2>Add new</h2>\r\n        <form>\r\n          <div>\r\n            name: <input value={newName} onChange={(e) => handleTyping(setNewName, e)}/>\r\n          </div>\r\n          <div>\r\n            number: <input value={newNumber} onChange={(e) => handleTyping(setNewNumber, e)}/>\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\" onClick={handleSend}>add</button>\r\n          </div>\r\n        </form>\r\n        \r\n        <h2>Numbers</h2>\r\n        {renderNumbers()}\r\n      \r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default App"]},"metadata":{},"sourceType":"module"}