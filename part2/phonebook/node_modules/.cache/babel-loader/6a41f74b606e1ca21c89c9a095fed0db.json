{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Javi\\\\Documents\\\\GitHub\\\\full_stack_open\\\\part2\\\\phonebook\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Javi\\\\Documents\\\\GitHub\\\\full_stack_open\\\\part2\\\\phonebook\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport handleTyping from './helpers'; //COMPONENTS\n\nconst Person = ({\n  name,\n  number\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5\n  },\n  __self: this\n}, \" \", name, \" \", number);\n\nconst Search = ({\n  newSearch,\n  setNewSearch\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Search: \", React.createElement(\"input\", {\n    value: newSearch,\n    onChange: e => handleTyping(setNewSearch, e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }));\n};\n\nconst NewName = ({\n  persons,\n  setPersons,\n  newName,\n  setNewName,\n  newNumber,\n  setNewNumber\n}) => {\n  //handleSend updates the state of person so the newName typed is added\n  const handleSend = event => {\n    event.preventDefault(); //Prevents contacts for being stored empty\n\n    if (newName.length * newNumber.length === 0) return; //Prevents storing contact that already exist\n\n    if (persons.find(person => person.name === newName)) {\n      window.alert(\"\".concat(newName, \" is already added to phonebook\"));\n      return;\n    } //Set new person\n\n\n    const personObject = {\n      name: newName,\n      number: newNumber\n    };\n    setPersons(persons.concat(personObject)); //Restore defaults for fields\n\n    setNewName('');\n    setNewNumber('');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Add new\"), React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Name: \", React.createElement(\"input\", {\n    value: newName,\n    onChange: e => handleTyping(setNewName, e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Number: \", React.createElement(\"input\", {\n    value: newNumber,\n    onChange: e => handleTyping(setNewNumber, e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: handleSend,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"add\"))));\n};\n\nconst DisplayContacts = ({\n  persons,\n  newSearch\n}) => {\n  //renderNumbers renders all numbers if search field is empty. Renders matches if search field is being used.\n  const renderNumbers = () => {\n    if (newSearch === '') {\n      return persons.map(person => React.createElement(Person, {\n        key: person.name,\n        name: person.name,\n        number: person.number,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }));\n    } else {\n      let re = new RegExp(newSearch, 'i');\n      let personsFiltered = persons.filter(person => re.test(person.name));\n      return personsFiltered.map(person => React.createElement(Person, {\n        key: person.name,\n        name: person.name,\n        number: person.number,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Contacts\"), renderNumbers());\n};\n\nconst App = () => {\n  //STATE:\n  const _useState = useState([{\n    name: 'Arto Hellas',\n    number: '040-1234567'\n  }, {\n    name: 'Ada Lovelace',\n    number: '39-44-5323523'\n  }, {\n    name: 'Dan Abramov',\n    number: '12-43-234345'\n  }, {\n    name: 'Mary Poppendieck',\n    number: '39-23-6423122'\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        persons = _useState2[0],\n        setPersons = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newName = _useState4[0],\n        setNewName = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        newNumber = _useState6[0],\n        setNewNumber = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        newSearch = _useState8[0],\n        setNewSearch = _useState8[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Phonebook\"), React.createElement(Search, {\n    newSearch: newSearch,\n    setNewSearch: setNewSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(NewName, {\n    persons: persons,\n    setPersons: setPersons,\n    newName: newName,\n    setNewName: setNewName,\n    newNumber: newNumber,\n    setNewNumber: setNewNumber,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(DisplayContacts, {\n    persons: persons,\n    newSearch: newSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Javi/Documents/GitHub/full_stack_open/part2/phonebook/src/App.js"],"names":["React","useState","handleTyping","Person","name","number","Search","newSearch","setNewSearch","e","NewName","persons","setPersons","newName","setNewName","newNumber","setNewNumber","handleSend","event","preventDefault","length","find","person","window","alert","personObject","concat","DisplayContacts","renderNumbers","map","re","RegExp","personsFiltered","filter","test","App"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport handleTyping from './helpers'\r\n\r\n//COMPONENTS\r\nconst Person = ({name, number}) => <div> {name} {number}</div>\r\n\r\nconst Search = ({newSearch,  setNewSearch}) =>{\r\n  return(\r\n    <div>\r\n      Search: <input value={newSearch} onChange={(e) => handleTyping(setNewSearch, e)}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst NewName = ({persons, setPersons, newName,setNewName,newNumber,setNewNumber}) =>{\r\n    //handleSend updates the state of person so the newName typed is added\r\n    const handleSend = (event) => {\r\n      event.preventDefault()\r\n\r\n      //Prevents contacts for being stored empty\r\n      if (newName.length * newNumber.length === 0) return\r\n\r\n      //Prevents storing contact that already exist\r\n      if (persons.find(person => person.name === newName)){\r\n          window.alert(`${newName} is already added to phonebook`)\r\n          return\r\n      }\r\n\r\n      //Set new person\r\n      const personObject = {\r\n          name: newName,\r\n          number: newNumber\r\n      }\r\n      setPersons(persons.concat(personObject))\r\n\r\n      //Restore defaults for fields\r\n      setNewName('')\r\n      setNewNumber('')\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <h2>Add new</h2>\r\n      <form>\r\n            <div>\r\n              Name: <input value={newName} onChange={(e) => handleTyping(setNewName, e)}/>\r\n            </div>\r\n            <div>\r\n              Number: <input value={newNumber} onChange={(e) => handleTyping(setNewNumber, e)}/>\r\n            </div>\r\n            <div>\r\n              <button type=\"submit\" onClick={handleSend}>add</button>\r\n            </div>\r\n          </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst DisplayContacts = ({persons, newSearch}) => {\r\n  \r\n  //renderNumbers renders all numbers if search field is empty. Renders matches if search field is being used.\r\n  const renderNumbers = ()=> {\r\n      \r\n    if (newSearch === ''){\r\n      return persons.map((person)=><Person key={person.name} name={person.name} number={person.number}/>)\r\n    }else{\r\n      let re = new RegExp(newSearch, 'i')\r\n      let personsFiltered = persons.filter((person)=> re.test(person.name))\r\n      return personsFiltered.map((person)=><Person key={person.name} name={person.name} number={person.number}/>)\r\n    }\r\n  }\r\n \r\n  return(\r\n    <div>\r\n      <h2>Contacts</h2>\r\n      {renderNumbers()}\r\n    </div>\r\n    )   \r\n}\r\n\r\nconst App = () => {\r\n    //STATE:\r\n    const [ persons, setPersons] = useState([\r\n      { name: 'Arto Hellas',number: '040-1234567'},\r\n      { name: 'Ada Lovelace', number: '39-44-5323523' },\r\n      { name: 'Dan Abramov', number: '12-43-234345' },\r\n      { name: 'Mary Poppendieck', number: '39-23-6423122'}\r\n    ]) \r\n    const [ newName, setNewName ] = useState('')\r\n    const [ newNumber, setNewNumber] = useState('')\r\n    const [ newSearch, setNewSearch] = useState('')\r\n\r\n    return (\r\n      <div>\r\n        <h2>Phonebook</h2>\r\n\r\n        <Search \r\n          newSearch={newSearch} \r\n          setNewSearch={setNewSearch}\r\n        />\r\n        \r\n        <NewName \r\n          persons = {persons}\r\n          setPersons = {setPersons}\r\n          newName = {newName}\r\n          setNewName = {setNewName}\r\n          newNumber = {newNumber}\r\n          setNewNumber = {setNewNumber}\r\n        /> \r\n        \r\n        <DisplayContacts \r\n          persons= {persons}\r\n          newSearch= {newSearch}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default App"]},"metadata":{},"sourceType":"module"}