{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Javi\\\\Documents\\\\GitHub\\\\full_stack_open\\\\part2\\\\phonebook\\\\src\\\\components\\\\DisplayContacts.js\";\nimport React from 'react';\nimport Person from './Person';\nimport contactsServices from '../services/contacts'; //DisplayContacts renders the contacts according with the search field.\n\nconst DisplayContacts = ({\n  persons,\n  setPersons,\n  newSearch,\n  setMessage\n}) => {\n  const handleDelete = person => {\n    //When clicking a window pops up to tell the user to confirm the action. If confirmed, the contact is deleted.\n    if (window.confirm(\"Are you sure you want to delete '\".concat(person.name, \"'?\"))) {\n      contactsServices.deleteContact(person.id).then(() => {\n        const match = persons.find(per => per === person); //Deleted person is removed from the state\n\n        const updatedPersons = [...persons];\n        updatedPersons.splice(persons.indexOf(match), 1); //Update state\n\n        setPersons(updatedPersons); //Notify user\n\n        setMessage({\n          mes: person.name + \" has been deleted.\",\n          err: \"message\"\n        });\n        setTimeout(() => setMessage(''), 5000);\n      }).catch(err => {\n        //Notify user\n        setMessage({\n          mes: person.name + \" has already been removed from server.\",\n          err: \"error\"\n        });\n        setTimeout(() => setMessage(''), 5000);\n      });\n    }\n  }; //renderNumbers renders all numbers if search field is empty. Renders matches if search field is being used.\n\n\n  const renderNumbers = () => {\n    if (newSearch === '') {\n      return persons.map(person => React.createElement(Person, {\n        key: person.id,\n        person: person,\n        handleDelete: handleDelete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    } else {\n      let re = new RegExp(newSearch, 'i');\n      let personsFiltered = persons.filter(person => re.test(person.name));\n      return personsFiltered.map(person => React.createElement(Person, {\n        key: person.id,\n        person: person,\n        handleDelete: handleDelete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }));\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Contacts\"), renderNumbers());\n};\n\nexport default DisplayContacts;","map":{"version":3,"sources":["C:/Users/Javi/Documents/GitHub/full_stack_open/part2/phonebook/src/components/DisplayContacts.js"],"names":["React","Person","contactsServices","DisplayContacts","persons","setPersons","newSearch","setMessage","handleDelete","person","window","confirm","name","deleteContact","id","then","match","find","per","updatedPersons","splice","indexOf","mes","err","setTimeout","catch","renderNumbers","map","re","RegExp","personsFiltered","filter","test"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,gBAAP,MAA6B,sBAA7B,C,CAEA;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA,UAAV;AAAsBC,EAAAA,SAAtB;AAAiCC,EAAAA;AAAjC,CAAD,KAAkD;AAExE,QAAMC,YAAY,GAAIC,MAAD,IAAW;AAC9B;AACA,QAAIC,MAAM,CAACC,OAAP,4CAAmDF,MAAM,CAACG,IAA1D,QAAJ,EAAyE;AACrEV,MAAAA,gBAAgB,CACXW,aADL,CACmBJ,MAAM,CAACK,EAD1B,EAEKC,IAFL,CAGQ,MAAI;AACA,cAAMC,KAAK,GAAGZ,OAAO,CAACa,IAAR,CAAaC,GAAG,IAAIA,GAAG,KAAKT,MAA5B,CAAd,CADA,CAEA;;AACA,cAAMU,cAAc,GAAG,CAAC,GAAGf,OAAJ,CAAvB;AACAe,QAAAA,cAAc,CAACC,MAAf,CAAsBhB,OAAO,CAACiB,OAAR,CAAgBL,KAAhB,CAAtB,EAA6C,CAA7C,EAJA,CAMA;;AACAX,QAAAA,UAAU,CAACc,cAAD,CAAV,CAPA,CASA;;AACAZ,QAAAA,UAAU,CAAC;AACTe,UAAAA,GAAG,EAAEb,MAAM,CAACG,IAAP,GAAc,oBADV;AAETW,UAAAA,GAAG,EAAE;AAFI,SAAD,CAAV;AAKAC,QAAAA,UAAU,CAAC,MACXjB,UAAU,CAAC,EAAD,CADA,EAER,IAFQ,CAAV;AAGH,OArBT,EAsBKkB,KAtBL,CAsBWF,GAAG,IAAG;AACX;AACAhB,QAAAA,UAAU,CAAC;AACTe,UAAAA,GAAG,EAAEb,MAAM,CAACG,IAAP,GAAc,wCADV;AAETW,UAAAA,GAAG,EAAE;AAFI,SAAD,CAAV;AAKAC,QAAAA,UAAU,CAAC,MACXjB,UAAU,CAAC,EAAD,CADA,EAER,IAFQ,CAAV;AAID,OAjCL;AAkCH;AACF,GAtCD,CAFwE,CA0CtE;;;AACA,QAAMmB,aAAa,GAAG,MAAK;AACzB,QAAIpB,SAAS,KAAK,EAAlB,EAAqB;AACnB,aAAOF,OAAO,CAACuB,GAAR,CAAalB,MAAD,IAAU,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAEA,MAAM,CAACK,EAApB;AAAwB,QAAA,MAAM,EAAEL,MAAhC;AAAwC,QAAA,YAAY,EAAED,YAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAtB,CAAP;AACD,KAFD,MAEK;AACH,UAAIoB,EAAE,GAAG,IAAIC,MAAJ,CAAWvB,SAAX,EAAsB,GAAtB,CAAT;AACA,UAAIwB,eAAe,GAAG1B,OAAO,CAAC2B,MAAR,CAAgBtB,MAAD,IAAWmB,EAAE,CAACI,IAAH,CAAQvB,MAAM,CAACG,IAAf,CAA1B,CAAtB;AACA,aAAOkB,eAAe,CAACH,GAAhB,CAAqBlB,MAAD,IAAU,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAEA,MAAM,CAACK,EAApB;AAAwB,QAAA,MAAM,EAAEL,MAAhC;AAAwC,QAAA,YAAY,EAAED,YAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA9B,CAAP;AACD;AACF,GARD;;AAUA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGkB,aAAa,EAFhB,CADF;AAMH,CA3DD;;AA6DA,eAAevB,eAAf","sourcesContent":["import React from 'react'\r\nimport Person from './Person'\r\nimport contactsServices from '../services/contacts'\r\n\r\n//DisplayContacts renders the contacts according with the search field.\r\n\r\nconst DisplayContacts = ({persons, setPersons, newSearch, setMessage}) => {\r\n  \r\n  const handleDelete = (person) =>{\r\n    //When clicking a window pops up to tell the user to confirm the action. If confirmed, the contact is deleted.\r\n    if (window.confirm(`Are you sure you want to delete '${person.name}'?`)) {\r\n        contactsServices\r\n            .deleteContact(person.id)\r\n            .then(\r\n                ()=>{\r\n                    const match = persons.find(per => per === person)\r\n                    //Deleted person is removed from the state\r\n                    const updatedPersons = [...persons]\r\n                    updatedPersons.splice(persons.indexOf(match),1)\r\n                    \r\n                    //Update state\r\n                    setPersons(updatedPersons)\r\n\r\n                    //Notify user\r\n                    setMessage({\r\n                      mes: person.name + \" has been deleted.\",\r\n                      err: \"message\"\r\n                    })\r\n\r\n                    setTimeout(() =>\r\n                    setMessage('')\r\n                    , 5000)\r\n                })\r\n            .catch(err =>{\r\n              //Notify user\r\n              setMessage({\r\n                mes: person.name + \" has already been removed from server.\",\r\n                err: \"error\"\r\n              })\r\n\r\n              setTimeout(() =>\r\n              setMessage('')\r\n              , 5000)\r\n\r\n            })\r\n    }\r\n  }\r\n\r\n    //renderNumbers renders all numbers if search field is empty. Renders matches if search field is being used.\r\n    const renderNumbers = ()=> {\r\n      if (newSearch === ''){\r\n        return persons.map((person)=><Person key={person.id} person={person} handleDelete={handleDelete}/>)\r\n      }else{\r\n        let re = new RegExp(newSearch, 'i')\r\n        let personsFiltered = persons.filter((person)=> re.test(person.name))\r\n        return personsFiltered.map((person)=><Person key={person.id} person={person} handleDelete={handleDelete}/>)\r\n      }\r\n    }\r\n   \r\n    return(\r\n      <div>\r\n        <h2>Contacts</h2>\r\n        {renderNumbers()}\r\n      </div>\r\n      )   \r\n}\r\n\r\nexport default DisplayContacts"]},"metadata":{},"sourceType":"module"}