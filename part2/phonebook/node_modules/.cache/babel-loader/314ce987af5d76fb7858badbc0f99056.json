{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Javi\\\\Documents\\\\GitHub\\\\full_stack_open\\\\part2\\\\phonebook\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Javi\\\\Documents\\\\GitHub\\\\full_stack_open\\\\part2\\\\phonebook\\\\src\\\\App.js\";\nimport React, { useState } from 'react'; //COMPONENTS\n\nconst Person = ({\n  name,\n  number\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4\n  },\n  __self: this\n}, \" \", name, \" \", number);\n\nconst App = () => {\n  //STATE:\n  const _useState = useState([{\n    name: 'Arto Hellas',\n    number: '040-1234567'\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        persons = _useState2[0],\n        setPersons = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newName = _useState4[0],\n        setNewName = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        newNumber = _useState6[0],\n        setNewNumber = _useState6[1]; //HELPER FUNCTIONS:\n  //handleTyping updates the state of newName as the user types\n\n  /*const handleTyping = (event) => {\r\n      setNewName(event.target.value)\r\n  }*/\n\n\n  const handleTyping = (x, setNew) => {\n    setNew(x.target.value);\n  }; //handleSend updates the state of person so the newName typed is added\n\n\n  const handleSend = event => {\n    event.preventDefault(); //Prevents contacts for being stored empty\n\n    if (newName.length === 0) return; //Prevents storing contact that already exist\n\n    if (persons.find(person => person.name === newName)) {\n      window.alert(\"\".concat(newName, \" is already added to phonebook\"));\n      return;\n    }\n\n    const personObject = {\n      name: newName\n    };\n    setPersons(persons.concat(personObject));\n    setNewName('');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Phonebook\"), React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"name: \", React.createElement(\"input\", {\n    value: newName,\n    onChange: handleTyping(x, setNewName),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"number: \", React.createElement(\"input\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: handleSend,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"add\"))), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Numbers\"), persons.map(person => React.createElement(Person, {\n    key: person.name,\n    name: person.name,\n    number: person.number,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Javi/Documents/GitHub/full_stack_open/part2/phonebook/src/App.js"],"names":["React","useState","Person","name","number","App","persons","setPersons","newName","setNewName","newNumber","setNewNumber","handleTyping","x","setNew","target","value","handleSend","event","preventDefault","length","find","person","window","alert","personObject","concat","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;AACA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAD,KAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAOD,IAAP,OAAcC,MAAd,CAAnC;;AAGA,MAAMC,GAAG,GAAG,MAAM;AACd;AADc,oBAEiBJ,QAAQ,CAAC,CACtC;AAAEE,IAAAA,IAAI,EAAE,aAAR;AACEC,IAAAA,MAAM,EAAE;AADV,GADsC,CAAD,CAFzB;AAAA;AAAA,QAENE,OAFM;AAAA,QAEGC,UAFH;;AAAA,qBAOkBN,QAAQ,CAAC,EAAD,CAP1B;AAAA;AAAA,QAONO,OAPM;AAAA,QAOGC,UAPH;;AAAA,qBAQqBR,QAAQ,CAAC,EAAD,CAR7B;AAAA;AAAA,QAQNS,SARM;AAAA,QAQKC,YARL,kBAUd;AAEA;;AACA;;;;;AAIA,QAAMC,YAAY,GAAG,CAACC,CAAD,EAAIC,MAAJ,KAAe;AAClCA,IAAAA,MAAM,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,CAAN;AACD,GAFD,CAjBc,CAoBd;;;AACA,QAAMC,UAAU,GAAIC,KAAD,IAAW;AAC1BA,IAAAA,KAAK,CAACC,cAAN,GAD0B,CAG1B;;AACA,QAAIX,OAAO,CAACY,MAAR,KAAmB,CAAvB,EAA0B,OAJA,CAM1B;;AACA,QAAId,OAAO,CAACe,IAAR,CAAaC,MAAM,IAAIA,MAAM,CAACnB,IAAP,KAAgBK,OAAvC,CAAJ,EAAoD;AAChDe,MAAAA,MAAM,CAACC,KAAP,WAAgBhB,OAAhB;AACA;AACH;;AAED,UAAMiB,YAAY,GAAG;AACjBtB,MAAAA,IAAI,EAAEK;AADW,KAArB;AAIAD,IAAAA,UAAU,CAACD,OAAO,CAACoB,MAAR,CAAeD,YAAf,CAAD,CAAV;AACAhB,IAAAA,UAAU,CAAC,EAAD,CAAV;AACH,GAlBD;;AAoBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACQ;AAAO,IAAA,KAAK,EAAED,OAAd;AAAuB,IAAA,QAAQ,EAAEI,YAAY,CAACC,CAAD,EAAIJ,UAAJ,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADR,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADV,CAJF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEQ,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CAPF,CAFF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAbF,EAcGX,OAAO,CAACqB,GAAR,CAAaL,MAAD,IAAU,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAEA,MAAM,CAACnB,IAApB;AAA0B,IAAA,IAAI,EAAEmB,MAAM,CAACnB,IAAvC;AAA6C,IAAA,MAAM,EAAEmB,MAAM,CAAClB,MAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAtB,CAdH,CADF;AAkBD,CA3DH;;AA6DE,eAAeC,GAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\n//COMPONENTS\r\nconst Person = ({name, number}) => <div> {name} {number}</div>\r\n\r\n\r\nconst App = () => {\r\n    //STATE:\r\n    const [ persons, setPersons] = useState([\r\n      { name: 'Arto Hellas',\r\n        number: '040-1234567'\r\n      }\r\n    ]) \r\n    const [ newName, setNewName ] = useState('')\r\n    const [ newNumber, setNewNumber] = useState('')\r\n    \r\n    //HELPER FUNCTIONS:\r\n\r\n    //handleTyping updates the state of newName as the user types\r\n    /*const handleTyping = (event) => {\r\n        setNewName(event.target.value)\r\n    }*/\r\n\r\n    const handleTyping = (x, setNew) => {\r\n      setNew(x.target.value)\r\n    }\r\n    //handleSend updates the state of person so the newName typed is added\r\n    const handleSend = (event) => {\r\n        event.preventDefault()\r\n\r\n        //Prevents contacts for being stored empty\r\n        if (newName.length === 0) return\r\n\r\n        //Prevents storing contact that already exist\r\n        if (persons.find(person => person.name === newName)){\r\n            window.alert(`${newName} is already added to phonebook`)\r\n            return\r\n        }\r\n\r\n        const personObject = {\r\n            name: newName\r\n        }\r\n\r\n        setPersons(persons.concat(personObject))\r\n        setNewName('')\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h2>Phonebook</h2>\r\n        <form>\r\n          <div>\r\n            name: <input value={newName} onChange={handleTyping(x, setNewName)}/>\r\n          </div>\r\n          <div>\r\n            number: <input />\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\" onClick={handleSend}>add</button>\r\n          </div>\r\n        </form>\r\n        <h2>Numbers</h2>\r\n        {persons.map((person)=><Person key={person.name} name={person.name} number={person.number}/>)}\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default App"]},"metadata":{},"sourceType":"module"}