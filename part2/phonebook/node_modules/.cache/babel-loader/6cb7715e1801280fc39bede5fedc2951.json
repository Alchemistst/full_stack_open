{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Javi\\\\Documents\\\\GitHub\\\\full_stack_open\\\\part2\\\\phonebook\\\\src\\\\components\\\\DisplayContacts.js\";\nimport React from 'react';\nimport Person from './Person'; //DisplayContacts renders the contacts according with the search field.\n\nconst DisplayContacts = ({\n  persons,\n  newSearch\n}) => {\n  const handleDelete = person => {\n    //When clicking a window pops up to tell the user to confirm the action. If confirmed, the contact is deleted.\n    if (window.confirm(\"Are you sure you want to delete '\".concat(name, \"'?\"))) {\n      contactsServices.deleteContact(id).then(() => {\n        const match = persons.find(per => per === person); //Updated person is added to the state\n\n        const updatedPersons = [...persons];\n        updatedPersons.splice(persons.indexOf(match), 1);\n        console.log(updatedPersons); //setPersons(updatedPersons)\n        //Restore defaults for fields\n        //setNewName('')\n        //setNewNumber('')\n      }).catch(err => alert(\"Something went wrong. \" + err)); //TODO: UPDATE STATE WHEN CONTACT IS DELETED\n    }\n  }; //renderNumbers renders all numbers if search field is empty. Renders matches if search field is being used.\n\n\n  const renderNumbers = () => {\n    if (newSearch === '') {\n      return persons.map(person => React.createElement(Person, {\n        key: person.id,\n        person: person,\n        handleDelete: handleDelete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }));\n    } else {\n      let re = new RegExp(newSearch, 'i');\n      let personsFiltered = persons.filter(person => re.test(person.name));\n      return personsFiltered.map(person => React.createElement(Person, {\n        key: person.id,\n        id: person.id,\n        name: person.name,\n        number: person.number,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }));\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Contacts\"), renderNumbers());\n};\n\nexport default DisplayContacts;","map":{"version":3,"sources":["C:/Users/Javi/Documents/GitHub/full_stack_open/part2/phonebook/src/components/DisplayContacts.js"],"names":["React","Person","DisplayContacts","persons","newSearch","handleDelete","person","window","confirm","name","contactsServices","deleteContact","id","then","match","find","per","updatedPersons","splice","indexOf","console","log","catch","err","alert","renderNumbers","map","re","RegExp","personsFiltered","filter","test","number"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAD,KAA0B;AAEhD,QAAMC,YAAY,GAAIC,MAAD,IAAW;AAC9B;AACA,QAAIC,MAAM,CAACC,OAAP,4CAAmDC,IAAnD,QAAJ,EAAkE;AAC9DC,MAAAA,gBAAgB,CACXC,aADL,CACmBC,EADnB,EAEKC,IAFL,CAGQ,MAAI;AACA,cAAMC,KAAK,GAAGX,OAAO,CAACY,IAAR,CAAaC,GAAG,IAAIA,GAAG,KAAKV,MAA5B,CAAd,CADA,CAEA;;AACA,cAAMW,cAAc,GAAG,CAAC,GAAGd,OAAJ,CAAvB;AACAc,QAAAA,cAAc,CAACC,MAAf,CAAsBf,OAAO,CAACgB,OAAR,CAAgBL,KAAhB,CAAtB,EAA6C,CAA7C;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYJ,cAAZ,EALA,CAOA;AAEA;AACA;AACA;AACH,OAfT,EAgBKK,KAhBL,CAgBWC,GAAG,IAAIC,KAAK,CAAC,2BAAyBD,GAA1B,CAhBvB,EAD8D,CAkB1D;AAEP;AACF,GAvBD,CAFgD,CA2B9C;;;AACA,QAAME,aAAa,GAAG,MAAK;AACzB,QAAIrB,SAAS,KAAK,EAAlB,EAAqB;AACnB,aAAOD,OAAO,CAACuB,GAAR,CAAapB,MAAD,IAAU,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAEA,MAAM,CAACM,EAApB;AAAwB,QAAA,MAAM,EAAEN,MAAhC;AAAwC,QAAA,YAAY,EAAED,YAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAtB,CAAP;AACD,KAFD,MAEK;AACH,UAAIsB,EAAE,GAAG,IAAIC,MAAJ,CAAWxB,SAAX,EAAsB,GAAtB,CAAT;AACA,UAAIyB,eAAe,GAAG1B,OAAO,CAAC2B,MAAR,CAAgBxB,MAAD,IAAWqB,EAAE,CAACI,IAAH,CAAQzB,MAAM,CAACG,IAAf,CAA1B,CAAtB;AACA,aAAOoB,eAAe,CAACH,GAAhB,CAAqBpB,MAAD,IAAU,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAEA,MAAM,CAACM,EAApB;AAAwB,QAAA,EAAE,EAAEN,MAAM,CAACM,EAAnC;AAAuC,QAAA,IAAI,EAAEN,MAAM,CAACG,IAApD;AAA0D,QAAA,MAAM,EAAEH,MAAM,CAAC0B,MAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA9B,CAAP;AACD;AACF,GARD;;AAUA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGP,aAAa,EAFhB,CADF;AAMH,CA5CD;;AA8CA,eAAevB,eAAf","sourcesContent":["import React from 'react'\r\nimport Person from './Person'\r\n\r\n//DisplayContacts renders the contacts according with the search field.\r\n\r\nconst DisplayContacts = ({persons, newSearch}) => {\r\n  \r\n  const handleDelete = (person) =>{\r\n    //When clicking a window pops up to tell the user to confirm the action. If confirmed, the contact is deleted.\r\n    if (window.confirm(`Are you sure you want to delete '${name}'?`)) {\r\n        contactsServices\r\n            .deleteContact(id)\r\n            .then(\r\n                ()=>{\r\n                    const match = persons.find(per => per === person)\r\n                    //Updated person is added to the state\r\n                    const updatedPersons = [...persons]\r\n                    updatedPersons.splice(persons.indexOf(match),1)\r\n                    console.log(updatedPersons)\r\n                    \r\n                    //setPersons(updatedPersons)\r\n          \r\n                    //Restore defaults for fields\r\n                    //setNewName('')\r\n                    //setNewNumber('')\r\n                })\r\n            .catch(err => alert(\"Something went wrong. \"+err))\r\n            //TODO: UPDATE STATE WHEN CONTACT IS DELETED\r\n            \r\n    }\r\n  }\r\n\r\n    //renderNumbers renders all numbers if search field is empty. Renders matches if search field is being used.\r\n    const renderNumbers = ()=> {\r\n      if (newSearch === ''){\r\n        return persons.map((person)=><Person key={person.id} person={person} handleDelete={handleDelete}/>)\r\n      }else{\r\n        let re = new RegExp(newSearch, 'i')\r\n        let personsFiltered = persons.filter((person)=> re.test(person.name))\r\n        return personsFiltered.map((person)=><Person key={person.id} id={person.id} name={person.name} number={person.number}/>)\r\n      }\r\n    }\r\n   \r\n    return(\r\n      <div>\r\n        <h2>Contacts</h2>\r\n        {renderNumbers()}\r\n      </div>\r\n      )   \r\n}\r\n\r\nexport default DisplayContacts"]},"metadata":{},"sourceType":"module"}