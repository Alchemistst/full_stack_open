{"version":3,"sources":["services/contacts.js","helpers/handleTyping.js","components/NewName.js","components/Person.js","components/DisplayContacts.js","components/Search.js","components/Message.js","App.js","index.js"],"names":["baseURL","axios","get","then","response","data","personObject","post","id","delete","concat","put","catch","err","alert","handleTyping","setNew","e","target","value","NewName","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setMessage","onChange","type","onClick","event","preventDefault","length","name","number","match","find","person","window","confirm","contactsService","updatedPerson","updatedPersons","indexOf","mes","setTimeout","newPerson","Person","handleDelete","DisplayContacts","newSearch","contactsServices","per","splice","map","key","re","RegExp","filter","test","renderNumbers","Search","setNewSearch","Message","message","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","App","useState","useEffect","contacts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.184a96d0.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseURL = '/api/persons'\r\n\r\n//Send http GET request to server to get all contacts\r\nconst getAll = () => {\r\n    return axios\r\n    .get(baseURL)\r\n    .then( response => {\r\n      return response.data\r\n    })\r\n}\r\n\r\n//Send http POST request to server to send new contact\r\nconst newContact = personObject => {\r\n    \r\n    return axios\r\n        .post(baseURL, personObject)\r\n        .then(response => {\r\n          return response.data\r\n        })\r\n        \r\n}\r\n\r\n//Send DELETE request for contact to server\r\nconst deleteContact = id => {\r\n    return axios\r\n    .delete(baseURL.concat('/'+id))\r\n    .then(response => response)\r\n    \r\n    \r\n}\r\n\r\n//Send PUT request to update contact number\r\nconst updateNumber = (id, personObject) => {\r\n  return axios\r\n  .put(baseURL.concat('/'+id), personObject)\r\n  .then(response => {\r\n    return response.data\r\n  })\r\n  .catch(err => alert(\"Something went wrong. \"+err))\r\n}\r\n\r\nexport default {getAll, newContact, deleteContact, updateNumber}","//handleTyping updates the state of the variable assigned to the field as the user types\r\n//Inputs=> setNew: method to change state / e:event object\r\n\r\nconst handleTyping = (setNew,e) => {\r\n    setNew(e.target.value)\r\n  }\r\n\r\n  export default handleTyping","import React from 'react'\r\nimport contactsService from '../services/contacts'\r\nimport handleTyping from '../helpers/handleTyping'\r\n\r\n\r\n//NewName components provides functionality for creating new contacts.\r\n\r\nconst NewName = ({persons, setPersons, newName, setNewName, newNumber, setNewNumber, setMessage}) =>{\r\n    //handleSend updates the state of person so the newName typed is added\r\n    const handleSend = (event) => {\r\n      event.preventDefault()\r\n\r\n      //Prevents contacts for being stored empty\r\n      if (newName.length * newNumber.length === 0) {\r\n        window.alert(\"Missing fields.\")  \r\n        return\r\n      }\r\n\r\n      //Set new person\r\n      const personObject = {\r\n        name: newName,\r\n        number: newNumber\r\n      }\r\n\r\n\r\n      //Updates contacts that already exist\r\n      const match = persons.find(person => person.name === newName)\r\n      if (match){\r\n          if(window.confirm(`${newName} is already added to phonebook. Replace old number?`)){\r\n            contactsService\r\n            .updateNumber(match.id, personObject)\r\n            .then(updatedPerson =>{\r\n              //Updated person is added to the state\r\n              const updatedPersons = [...persons]\r\n              updatedPersons[persons.indexOf(match)] = updatedPerson\r\n              setPersons(updatedPersons)\r\n    \r\n              //Restore defaults for fields\r\n              setNewName('')\r\n              setNewNumber('')\r\n\r\n              //Notify user\r\n              setMessage(\r\n                {\r\n                  mes : updatedPerson.name + \" has been updated.\",\r\n                  err: 'message'\r\n                })\r\n              \r\n              setTimeout(() =>\r\n                setMessage('')\r\n                , 5000\r\n              )\r\n            })\r\n            .catch(err => {\r\n              //Notify user\r\n              setMessage(\r\n                {\r\n                  mes : err,\r\n                  err: 'error'\r\n                })\r\n              \r\n              setTimeout(() =>\r\n                setMessage('')\r\n                , 5000\r\n              )\r\n            })\r\n          }\r\n          return\r\n      }\r\n\r\n     \r\n      //Send new person to server\r\n      contactsService\r\n        .newContact(personObject)\r\n        .then(newPerson =>{\r\n          //New person is added to the state\r\n          setPersons(persons.concat(newPerson))\r\n\r\n          //Restore defaults for fields\r\n          setNewName('')\r\n          setNewNumber('')\r\n\r\n          //Notify user\r\n          setMessage(\r\n            {\r\n              mes : newPerson.name + \" has been added.\",\r\n              err: 'message'\r\n            })\r\n          \r\n          setTimeout(() =>\r\n            setMessage('')\r\n            , 5000\r\n          )\r\n          \r\n        })\r\n        .catch(err => alert(\"Something went wrong. \"+err))\r\n      \r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <h2>Add new</h2>\r\n      <form>\r\n            <div>\r\n              Name: <input value={newName} onChange={(e) => handleTyping(setNewName, e)}/>\r\n            </div>\r\n            <div>\r\n              Number: <input value={newNumber} onChange={(e) => handleTyping(setNewNumber, e)}/>\r\n            </div>\r\n            <div>\r\n              <button type=\"submit\" onClick={handleSend}>add</button>\r\n            </div>\r\n          </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NewName","import React from 'react';\r\n\r\n//Person component renders a single person.\r\n\r\n\r\n\r\nconst Person = ({person, handleDelete}) => \r\n    <div> \r\n        {person.name} {person.number} <button onClick={() => handleDelete(person)}>delete</button>\r\n    </div>\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\nimport contactsServices from '../services/contacts'\r\n\r\n//DisplayContacts renders the contacts according with the search field.\r\n\r\nconst DisplayContacts = ({persons, setPersons, newSearch, setMessage}) => {\r\n  \r\n  const handleDelete = (person) =>{\r\n    //When clicking a window pops up to tell the user to confirm the action. If confirmed, the contact is deleted.\r\n    if (window.confirm(`Are you sure you want to delete '${person.name}'?`)) {\r\n        contactsServices\r\n            .deleteContact(person.id)\r\n            .then(\r\n                ()=>{\r\n                    const match = persons.find(per => per === person)\r\n                    //Deleted person is removed from the state\r\n                    const updatedPersons = [...persons]\r\n                    updatedPersons.splice(persons.indexOf(match),1)\r\n                    \r\n                    //Update state\r\n                    setPersons(updatedPersons)\r\n\r\n                    //Notify user\r\n                    setMessage({\r\n                      mes: person.name + \" has been deleted.\",\r\n                      err: \"message\"\r\n                    })\r\n\r\n                    setTimeout(() =>\r\n                    setMessage('')\r\n                    , 5000)\r\n                })\r\n            .catch(err =>{\r\n              //Notify user\r\n              setMessage({\r\n                mes: person.name + \" has already been removed from server.\",\r\n                err: \"error\"\r\n              })\r\n\r\n              setTimeout(() =>\r\n              setMessage('')\r\n              , 5000)\r\n\r\n            })\r\n    }\r\n  }\r\n\r\n    //renderNumbers renders all numbers if search field is empty. Renders matches if search field is being used.\r\n    const renderNumbers = ()=> {\r\n      if (newSearch === ''){\r\n        return persons.map((person)=><Person key={person.id} person={person} handleDelete={handleDelete}/>)\r\n      }else{\r\n        let re = new RegExp(newSearch, 'i')\r\n        let personsFiltered = persons.filter((person)=> re.test(person.name))\r\n        return personsFiltered.map((person)=><Person key={person.id} person={person} handleDelete={handleDelete}/>)\r\n      }\r\n    }\r\n   \r\n    return(\r\n      <div>\r\n        <h2>Contacts</h2>\r\n        {renderNumbers()}\r\n      </div>\r\n      )   \r\n}\r\n\r\nexport default DisplayContacts","import React from 'react';\r\nimport handleTyping from '../helpers/handleTyping'\r\n\r\n//Search component allows searching the phonebook. This component sends DisplayContacts component the value for displaying just the searched values.\r\n\r\nconst Search = ({newSearch,  setNewSearch}) =>{\r\n    return(\r\n      <div>\r\n        Search: <input value={newSearch} onChange={(e) => handleTyping(setNewSearch, e)}/>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Search","import React from 'react'\r\n\r\n\r\n//Message component render both notification (if called with err = \"message\") and error messages (if called with err = \"error\")\r\nconst Message = ({message}) =>{\r\n    \r\n    let style = {}\r\n\r\n    if (message.mes === null) {\r\n        return null\r\n    }\r\n\r\n    \r\n    if(message.err === \"error\"){\r\n        style = {\r\n            color: \"red\",\r\n            background: \"lightgrey\",\r\n            fontSize: \"20px\",\r\n            borderStyle: \"solid\",\r\n            borderRadius: \"5px\",\r\n            padding: \"10px\",\r\n            marginBottom: \"10px\"\r\n            }\r\n    }else if(message.err === \"message\"){\r\n        style = {\r\n            color: \"green\",\r\n            background: \"lightgrey\",\r\n            fontSize: \"20px\",\r\n            borderStyle: \"solid\",\r\n            borderRadius: \"5px\",\r\n            padding: \"10px\",\r\n            marginBottom: \"10px\"\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div style={style}>\r\n            {message.mes}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import React, { useState, useEffect } from 'react'\r\nimport contactsService from './services/contacts'\r\n\r\n//Import Components\r\nimport NewName from './components/NewName'\r\nimport DisplayContacts from './components/DisplayContacts'\r\nimport Search from './components/Search'\r\nimport Message from './components/Message'\r\n\r\nconst App = () => {\r\n    \r\n    //STATE:\r\n    const [ persons, setPersons] = useState([]) \r\n    const [ newName, setNewName ] = useState('')\r\n    const [ newNumber, setNewNumber ] = useState('')\r\n    const [ newSearch, setNewSearch ] = useState('')\r\n    const [ message, setMessage] = useState({\r\n      mes : '',\r\n      err : ''\r\n    })\r\n    //END of STATE\r\n    \r\n    //EFFECT HOOK:\r\n    useEffect(() => {\r\n      contactsService\r\n        .getAll()\r\n        .then(contacts => setPersons(contacts))\r\n    }\r\n    ,[])\r\n    //END of EFFECTS\r\n\r\n    return (\r\n      <div>\r\n        <h2>Phonebook</h2>\r\n\r\n        <Message message = {message}/>\r\n\r\n        <Search \r\n          newSearch = {newSearch} \r\n          setNewSearch = {setNewSearch}\r\n        />\r\n        \r\n        <NewName \r\n          persons = {persons}\r\n          setPersons = {setPersons}\r\n          newName = {newName}\r\n          setNewName = {setNewName}\r\n          newNumber = {newNumber}\r\n          setNewNumber = {setNewNumber}\r\n          setMessage = {setMessage}\r\n        /> \r\n        \r\n        <DisplayContacts \r\n          persons = {persons}\r\n          setPersons = {setPersons}\r\n          newSearch = {newSearch}\r\n          setMessage = {setMessage}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}